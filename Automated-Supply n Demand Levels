//@version=6
indicator('Automated - Supply n Demand Levels', overlay = true)

n = input(5, 'n')
DemandIndexValue = input(0.35, 'Demand Index Value')

h = high
l = low
c = close
v = volume
x = bar_index
//nan = na
wC = (h + l + 2 * c) * 0.25
wCR = (wC - wC[1]) / math.min(wC, wC[1])

Average(data, len) =>
    math.sum(data, len) / len
TrueRangeTS(h, c, l) =>
    math.max(c[1], h) - math.min(c[1], l)

cR = 3 * wC / Average(ta.highest(h, 2) - ta.lowest(l, 2), n) * math.abs(wCR)
vR = v / Average(v, n)

vPerC = vR / math.exp(math.min(88, cR))
atr = Average(TrueRangeTS(h, c, l), n) * 1.5

buyP = wCR > 0 ? vR : vPerC
sellP = wCR > 0 ? vPerC : vR

var buyPres = float(na)
var sellPres = float(na)
buyPres := na(buyPres[1]) ? 0 : (buyPres[1] * (n - 1) + buyP) / n
sellPres := na(sellPres[1]) ? 0 : (sellPres[1] * (n - 1) + sellP) / n

var DI = float(na)
if (sellPres[1] * (n - 1) + sellP) / n - (buyPres[1] * (n - 1) + buyP) / n > 0
    DI := -(sellPres != 0 ? buyPres / sellPres : 1)
    DI
else
    DI := buyPres != 0 ? sellPres / buyPres : 1
    DI

DMI = na(c) ? na : DI < 0 ? -1 - DI : 1 - DI
var DemandL = float(na)
var DemandH = float(na)
var DemandX = int(na)
DemandL := ta.crossunder(DMI, -DemandIndexValue) ? l : DMI < -.2 and l < DemandL[1] ? l : DemandL[1]
DemandH := l == DemandL ? h : DemandH[1]
DemandX := l == DemandL ? x : DemandX[1]

var DL = line.new(0, 0, 0, 0, color = color.rgb(49, 124, 83, 50), width = 2)
var DH = line.new(0, 0, 0, 0, color = color.rgb(49, 124, 83, 50), width = 2)

if barstate.islast
    line.set_xy1(DL, DemandX, DemandL)
    line.set_xy2(DL, DemandX + 1, DemandL)
    line.set_extend(DL, extend = extend.right)

    line.set_xy1(DH, DemandX, DemandH)
    line.set_xy2(DH, DemandX + 1, DemandH)
    line.set_extend(DH, extend = extend.right)

var dcloud = linefill.new(DL, DH, color.rgb(49, 124, 83, 50))

var SupplyH = float(na)
var SupplyL = float(na)
var SupplyX = int(na)
SupplyH := ta.crossover(DMI, DemandIndexValue) ? h : DMI > 0.5 and h > SupplyH ? h : SupplyH
SupplyL := h == SupplyH ? l : SupplyL[1]
SupplyX := h == SupplyH ? x : SupplyX[1]

var SH = line.new(0, 0, 0, 0, color = color.rgb(159, 55, 55, 51), width = 2)
var SL = line.new(0, 0, 0, 0, color = color.rgb(159, 55, 55, 51), width = 2)

if barstate.islast
    line.set_xy1(SH, SupplyX, SupplyH)
    line.set_xy2(SH, SupplyX + 1, SupplyH)
    line.set_extend(SH, extend = extend.right)

    line.set_xy1(SL, SupplyX, SupplyL)
    line.set_xy2(SL, SupplyX + 1, SupplyL)
    line.set_extend(SL, extend = extend.right)

var scloud = linefill.new(SH, SL, color.rgb(159, 55, 55, 51))

var res = float(na)
var resindex = int(na)
res := ta.crossover(c, SupplyH) ? atr : res[1]
resindex := ta.crossover(c, SupplyH) ? x : resindex[1]

var RH = line.new(0, 0, 0, 0, color = color.new(#0091ff, 70), width = 1)
var RL = line.new(0, 0, 0, 0, color = color.new(#0091ff, 70), width = 1)

if barstate.islast and resindex > SupplyX
    line.set_xy1(RH, SupplyX, SupplyH + 2 * res)
    line.set_xy2(RH, SupplyX + 1, SupplyH + 2 * res)
    line.set_extend(RH, extend = extend.right)

    line.set_xy1(RL, SupplyX, SupplyH + res)
    line.set_xy2(RL, SupplyX + 1, SupplyH + res)
    line.set_extend(RL, extend = extend.right)

var rcloud = linefill.new(RH, RL, color.new(#0091ff, 70))
